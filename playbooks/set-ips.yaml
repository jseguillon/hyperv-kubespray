# First : bootstrap with the help of kubespray role
# We then can get os family and act to config ips
- hosts: k8s-cluster:etcd:calico-rr
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  gather_facts: false
  vars:
    # Need to disable pipelining for bootstrap-os as some systems have requiretty in sudoers set, which makes pipelining
    # fail. bootstrap-os fixes this on these systems, so in later plays it can be enabled.
    ansible_ssh_pipelining: false
  roles:
    - { role: kubespray-defaults}
    - { role: bootstrap-os, tags: bootstrap-os}

# Now we have family, we can configure control plane interface with static ip
- hosts: k8s-cluster:etcd:calico-rr
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  gather_facts: true
  vars:
    ansible_ssh_pipelining: true
  tasks:
  - name: Centos | set ip {{ ip }} on eth1
    copy:
      dest: /etc/sysconfig/network-scripts/ifcfg-eth1
      content: |
            DEVICE="eth1"
            BOOTPROTO="static"
            ONBOOT="yes"
            TYPE="Ethernet"
            IPADDR={{ ip }}
            # GATEWAY={{ nodes_default_gateway }}
            NETMASK={{ nodes_icfg_netmask }}
    when: ansible_os_family == 'RedHat'
  - name: Centos | ifup eth1
    shell:
      cmd: ifup eth1
    when: ansible_os_family == 'RedHat'
    #TODO : Ubuntu now
  - name: Ubuntu/Debian remove ant old lease
    shell: rm -f /var/lib/NetworkManager/*.lease
    when: ansible_os_family == 'Debian'
  - name: Ubuntu/Debian | force netplan adding ip on eth1
    copy:
      dest: /etc/netplan/01-netcfg.yaml
      content: |
              network:
                version: 2
                renderer: networkd
                ethernets:
                  eth0:
                    dhcp4: true
                    dhcp6: false
                    optional: true
                    nameservers:
                      addresses: [4.2.2.1, 4.2.2.2, 208.67.220.220]
                  eth1:
                    dhcp4: false
                    dhcp6: false
                    optional: true
                    addresses: [{{ ip }}/{{ nodes_netplan_netmask }}]
    when: ansible_os_family == 'Debian'
  - name: Ubuntu/Debian | netplan apply
    shell:
      cmd: netplan apply
    when: ansible_os_family == 'Debian'
  - name: now reboot
    reboot:
  - name: check internet access OK
    uri:
      url: https://github.com
    tags:
      - check_internet

