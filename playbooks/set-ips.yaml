# First : bootstrap with the help of kubespray role
# We then can get os family and act to config ips
- hosts: k8s-cluster:etcd:calico-rr
  become: true
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  gather_facts: false
  vars:
    # Need to disable pipelining for bootstrap-os as some systems have requiretty in sudoers set, which makes pipelining
    # fail. bootstrap-os fixes this on these systems, so in later plays it can be enabled.
    ansible_ssh_pipelining: false
  roles:
    - { role: kubespray-defaults}
    - { role: bootstrap-os, tags: bootstrap-os}

# Now we have family, we can configure control plane interface with static ip
- hosts: k8s-cluster:etcd:calico-rr
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  gather_facts: true
  become: true
  vars:
    ansible_ssh_pipelining: true
  tasks:
  - name: Centos | set ip {{ ip }} on eth1 
    copy:
      dest: /etc/sysconfig/network-scripts/ifcfg-eth1
      content: |
            DEVICE="eth1"
            BOOTPROTO="static"
            ONBOOT="yes"
            TYPE="Ethernet"
            IPADDR={{ ip }}
            NETMASK=255.255.255.0
    when: ansible_os_family == 'RedHat'
  - name: Centos | ifup eth1
    shell: 
      cmd: ifup eth1
    when: ansible_os_family == 'RedHat'
